*tabloid.txt* Sensational tabbing.
						*tabloid* *Tabloid*
Author:  Nate Soares <http://so8r.es/>
License: Same terms as Vim itself (see |license|).

=============================================================================
CONTENTS                                        *tabloid-contents*
	1. Introduction...................................|tabloid-intro|
	2. Configuration..................................|tabloid-config|
	3. Detection......................................|tabliod-detect|
	3. Commands.......................................|tabloid-commands|
	4. Mappings.......................................|tabloid-mappings|
	4. Status line....................................|tabloid-statusline|
	5. Extras.........................................|tabloid-extras|
	6. About..........................................|tabloid-about|

=============================================================================
INTRODUCTION                                    *tabloid-intro*

Tabloid makes your tabbing sensational. It helps you:

* Fix indentation
* Change indentation
* Notice incorrect indentation with statusline warnings
* Jump to and from incorrect indentation
* Automatically detect file indents

=============================================================================
CONFIGURATION                                   *tabloid-config*

						*g:loaded_tabloid*
Use this to disable the plugin entirely: >
	let g:loaded_tabloid = 1
<

						*g:tabloid_autodetect*
Whether tabloid should automatically try to detect the indentation in new
files. Enabled by default.

May be a number (true/false), a whitelist of filetypes to autodetect on: >
	let g:tabloid_autodetect = ['c', 'python']
<
or a black dictionary of filetypes not to detect on: >
	let g:tabloid_autodetect = {'html': 0, 'markdown': 0}
<
See |tabloid-detect| for details.

						*g:tabloid_exempt*
A list of filetypes exempt from tabloid statusline complaints.

						*g:tabloid_vimrc_regex*
A regex that matches the vimrc file sourced by vim. By default it matches
'.vimrc', '_vimrc', and 'vim.rc' files. If you are using a non-standard vimrc
we recommend you put the following in your vimrc: >
	let g:tabloid_vimrc_regex = expand('<sfile>:t').'$'
<
This is used by |tabloid-detection| to help it know when it's OK to override
the current tab settings. If set incorrectly tabloid will not know that it can
override your vimrc's 'tabstop' and 'shiftwidth' settings.

If you do not set 'tabstop' or 'shiftwidth' in your vimrc you can ignore this
setting.

						*g:tabloid_default_width*
The default tab width for |tabloid-detection| to use when it finds
a tab-indented file. If not given, this will be whatever you set 'tabstop' to
in your vimrc, which is 8 by default.

						*g:tabloid_abide_spaces*
Whether or not to allow spaces after tabs when |expandtab| is off.
It is always an indentation error to have a full |tabstop| width of spaces
when |expandtab| is off. However, some programmers like to have |shiftwidth|
less than |tabstop| and then have spaces expand to tabs only when they get
long enough. Tabloid's authors find this insane, but Tabloid does support the
style by default.

You may turn off this support: >
	let g:tabloid_abide_spaces = 0
< This turns on errors for any file that mixes tabs and spaces.

You may also set this variable as a whitelist of supporting filetypes: >
	let g:tabloid_abide_spaces = ['java', 'cpp']
< which allows tab/space mixing only in 'java' and 'cpp' files.

You may also set this variable as a blackdict of unsupported filetypes: >
	let g:tabloid_abide_spaces = {'python': 0, 'haskell': 0}
< which allows tab/space mixing in every file except 'python' and 'haskell'
files.

NOTE: 'help' files often have a single space in front of each modeline, so if
you don't like this feature then the following is strongly suggested: >
	let g:tabloid_abide_spaces = ['help']
<

						*g:tabloid_automap*
Whether to make the default key mappings. See |tabloid-mapping|. Default :0

=============================================================================
DETECTION                                       *tabloid-detect*

When entering a new file tabloid can try to detect what indentation that file
uses. In order to detect this, it does the following:

* If the file has only space indents it looks for the smallest space indent
  can find (that is not just one space) and assumes that that is the width of
  a space indent.
* If the file has only tab indents it sets both 'shiftwidth' and 'tabstop' to
  |g:tabloid_default_width| (which falls back to the default 'tabstop').
* If the file is mixing spaces and indents it assumes that each tab is two
  indents wide. It set your settings accordingly.

Tabbing will only be autodetected if 'shiftwidth' and 'tabstop' have not been
set elsewhere.

Detection only occurs if |g:tabloid_autodetect| is on and allows autodetection
on the filetype.

Detection does not occur if 'tabstop' or 'shiftwidth' have already been set.
Your vimrc is exempt from this rule, but only if |g:tabloid_vimrc_regex| is
set correctly.

If detection is not occurring you might want to check whether or not a view
file is setting 'tabstop' and 'shiftwidth' before detection occurs. See
|views|.

=============================================================================
COMMANDS                                        *tabloid-commands*
<
:[range]TabloidFix [count]                      *TabloidFix*
	Fixes indentation in a file. Use 'TabloidFix' by setting |expandtab|,
	|shiftwidth|, and |tabstop| just how you like them. 'TabloidFix' will
	then update [range] to match your indentation needs. [range] defaults
	to the whole file.

	'TabloidFix' will only change indentation. It will not change any
	whitespace that comes after your indentation, such as tabs or spaces
	aligning comments at the end of each line.

	'TabloidFix' is not all knowing. If your file is using spaces for
	indents and you're changing the width of those indents, 'TabloidFix'
	tries to guess how wide the space indents are by looking through
	[range] and assuming that the first space-indent it finds is one
	indent level wide. You may manually pass in the space indent width as
	[count] if 'TabloidFix' is guessing wrong.

:TabloidSpacify [count]                         *TabloidSpacify*
	Changes indentation in the file to spaces. All spaces are made [count]
	wide. |shiftwidth| and |tabstop| are set to [count]. If [count] is not
	given then it defaults to the current 'shiftwidth' (or 'tabstop', if
	'shiftwidth' is 0). Turns on |expandtab|.

:TabloidTabify [count]                          *TabloidTabify*
	Changes indentation in the file to tabs. |shiftwidth| and |tabstop|
	are set to [count]. If [count] is not given then it defaults to the
	current 'shiftwidth' (or 'tabstop', if 'shiftwidth' is 0). Turns
	|expandtab| off.

:TabloidToggle [count]                          *TabloidToggle*
	If |expandtab| is on, acts like |TabloidTabify|. Otherwise, acts like
	|TabloidSpacify|.

:TabloidNext                                    *TabloidNext*
	Jumps the cursor to the next improperly indented line.

:TabloidPrev                                    *TabloidPrev*
	Jumps the cursor to the previous improperly indented line.

=============================================================================
MAPPINGS                                        *tabloid-mappings*

Tabloid does not change your mappings by default. We recommend you add your
own mappings to tabloid, as follows: >
	noremap          <leader>== :TabloidFix<CR>
	noremap <silent> <leader>=s :<C-U>call tabloid#set(1, -1)<CR>
	noremap <silent> <leader>=t :<C-U>call tabloid#set(0, -1)<CR>
	noremap <silent> <leader>=T :<C-U>call tabloid#set(!&et, -1)<CR>
	noremap          <leader>=n :TabloidNext<CR>
	noremap          <leader>=p :TabloidPrev<CR>
< Notice the use of <C-U> and |tabloid#set| instead of using tabloid commands
to change file spacing. This is a neat trick which allows you to use the
command with a count. For example, if you use the mappings above (assuming
your mapleader is \) then you can use the following command >
	4\=s
< to change the file indentation to 4 spaces.

If you like these mappings you can enable them with |g:tabloid_automap|.
You're encouraged to customize your mappings to fit your needs.

=============================================================================
STATUSLINE                                      *tabloid-statusline*

Tabloid does not change your status line, but it does provide hooks for you
to add indentation warnings to your status line.

						*tabloid#haserror()*
This function lets you know when a file has indentation errors. You can add it
to your statusline with the following command: >
	set statusline+=%#ErrorMsg#
	set statusline+=%{tabloid#haserror()?'[indent]':''}
	set statusline+=%*
<

tabloid#statusline({level})                     *tabloid#statusline()*
For a slightly prettier statusline error use this function. It returns '[ ]'
if your file has an indentation error due to misplaced spaces and '[▷]' if the
error is due to misplaced tabs. Use it as follows: >
	set statusline+=%#ErrorMsg#
	set statusline+=%{tabloid#statusline()}
	set statusline+=%*
<
You can coax more functionality out of 'tabloid#statusline()' by passing it
a {level}. {level} must be one of:

0. g:tabloid#MESSAGE
1. g:tabloid#INFO
2. g:tabloid#WARNING
3. g:tabloid#ERROR

If not given, it defaults to g:tabloid#ERROR.

When {level} is g:tabloid#MESSAGE the output is '[ X]' if indents are spaces
or '[▷X]' if indents are tabs, where X is the current indent width. No message
is displayed if spaces and tabs are being mixed intentionally.

When {level} is g:tabloid#INFO only produces output if spaces and tabs are
being mixed intentionally, in which case the output is '[X Y▷]' where
X |shiftwdith| and Y is |tabstop|.

When {level} is g:tabloid#ERROR output is as described above.

Currently, {level} g:tabloid#WARNING has no effect.

We recommend something like the following: >
	set statusline+=%*
	set statusline+=%{tabloid#statusline(g:tabloid#MESSAGE)}
	set statusline+=%#WarningMsg#
	set statusline+=%{tabloid#statusline(g:tabloid#INFO)}
	set statusline+=%#ErrorMsg#
	set statusline+=%{tabloid#statusline(g:tabloid#ERROR)}
	set statusline+=%*
< for maximum statusline information.

You are encouraged to write your own statusline function referencing
|tabloid#haserror()| if you prefer different fromatting.

=============================================================================
EXTRAS                                          *tabloid-extras*

tabloid#set({spaces}, {width})                  *tabloid#set()*
'tabloid#set' is an abstraction over |TabloidSpacify|, |TabloidTabify|, and
|TabloidToggle|. {spaces} determines whether or not tabbing in the file will
be set to spaces. (To toggle, use '!&et'.) {width} will determine the new
width of indents in the file. If {width} is 0 then the current 'shiftwidth'
will be used. If {width} is -1 then |v:count| will be used, which allows for
some cool mapping tricks. See |tabloid-mapping|.

=============================================================================
ABOUT                                           *tabloid-about*

Grab the latest version or report a bug on GitHub:

http://github.com/Soares/tabloid.vim

 vim:tw=78:ts=8:sw=0:sts=8:noet:ft=help:norl:
